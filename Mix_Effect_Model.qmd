---
title: "CTA Ridership Analysis Via Mixed Effect Model with US Census Data As Explanatory Variable"
author: "William Quinn"

output: 
  pdf_document:
    toc: true
    number_sections: true
  html_document:
    toc: true
    number_sections: true
    self_contained: true
includes:
  after_body: appendix.md
---

Hello! My name is William Quinn and I am a Political Science and Statistics major at Loyola University of Chicago. This is an independent data analysis project with the goal of identifying what aspects of a CTA rail station's location impact ridership numbers either positively or negatively. This project has 3 key elements:

-   Using the GeoPandas library in Python, we create a function to automatically assign census tracts (smallest unit of geographic measure in US census) to the closest CTA train stop. Any tract that is further then 4km is not considered to be close enough to associate with the station

-   Importing and merging CTA ridership numbers (as found on the Chicago City Open Data portal) and US census data from the year 2000 and 2010

-   The creation of a basic linear mixed-effect model so as to account of the correlation that will be found along the axis of time

Since data importing is not particularly important it can be found at the bottom in the appendix.

# Data Importing {.appendix}

```{r setup, include=FALSE}
library(scales)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tibble)
library(regclass)
library(car)
library(caret)
library(janitor)
library(MASS)
library(purrr)
library("lme4")
library(tidyverse)
library(ggsci)
library(see)
library(cowplot)
library(performance)
library(RCurl)
theme_set(theme_classic())
```

## Tract Identifiers and Data

### Tract ID Association

#### Python Function

I'm going to attach the python code for the tract association function here. This function takes the geographic center of all census tracts within cook county and associates them to the closest CTA rail station within 4km. This code does NOT run in R-Studio, but it is here for reference.

```{python}
#| eval: false
pip install geopandas
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
import numpy as np
```

```{python}
#| eval: false
census_tracts_path_2000 = "C:/Users/willq/Documents/Independent R project/2000/TRACT_LINES_2000/tl_2010_17031_tract00.shp"
census_tracts_path_2010 = "C:/Users/willq/Documents/Independent R project/2010/TRACT_LINES_2010/tl_2010_17031_tract10.shp"

census_tracts_2000 = gpd.read_file(census_tracts_path_2000)
census_tracts_2010 = gpd.read_file(census_tracts_path_2010)

csv_path = "C:/Users/willq/Documents/Independent R project/CTA_RAW_DATA/CTA_STOP_INFO.csv"
df = pd.read_csv(csv_path)

# Extract latitude and longitude from the 'location' column
df['latitude'] = df['Location'].str.extract(r'\(([^,]+),')[0].astype(float)
df['longitude'] = df['Location'].str.extract(r', ([^,]+)\)')[0].astype(float)

# Drop the 'location' column if no longer needed
df.drop(columns=['Location'], inplace=True)

# Create a GeoDataFrame
gdf = gpd.GeoDataFrame(
    df,
    geometry=gpd.points_from_xy(df['longitude'], df['latitude']),
    crs="EPSG:4326"  # Assuming WGS 84 (GPS coordinates)
)

# Preview the GeoDataFrame
print(gdf.head())
```

```{python}
#| eval: false
#2000
# Step 1: Reproject Both Datasets to a Projected CRS
# EPSG:3435 is suitable for Chicago area (Illinois State Plane East)
gdf = gdf.to_crs("EPSG:3435")
census_tracts_2000 = census_tracts_2000.to_crs(gdf.crs)

# Step 3: Calculate the Centroid of Each Census Tract
census_tracts_2000['centroid'] = census_tracts_2000.geometry.centroid

# Step 4: Find the Closest Station for Each Census Tract with Distance Check
def find_closest_station(tract, stations, max_distance=4000):
    # Calculate distances from the tract's centroid to all stations
    distances = stations.distance(tract['centroid'])
    
    # Find the index of the closest station
    closest_station_idx = distances.idxmin()
    
    # Get the minimum distance to the closest station
    closest_distance = distances.min()
    
    # If the closest station is within the specified max_distance, return the station ID
    if closest_distance <= max_distance:
        return stations.iloc[closest_station_idx]['MAP_ID'], closest_distance
    else:
        # Return NaN if the station is too far
        return np.nan, np.nan

# Apply the function to find the closest station for each tract and calculate the distance
census_tracts_2000['closest_station_id'], census_tracts_2000['distance_to_station'] = zip(
    *census_tracts_2000.apply(find_closest_station, stations=gdf, axis=1)
)

# Step 5: Filter out tracts with no valid closest station (distance > 1000 meters)
census_tracts_2000_filtered = census_tracts_2000.dropna(subset=['closest_station_id'])

# Step 6: Save the filtered result to CSV
census_tracts_2000_filtered.drop(columns=['geometry', 'centroid', 'distance_to_station']).to_csv(
    'C:/Users/willq/Documents/tracts_with_closest_station_filtered.csv', index=False
)

```

```{python}
#| eval: false
#2000
# Step 1: Reproject Both Datasets to a Projected CRS
# EPSG:3435 is suitable for Chicago area (Illinois State Plane East)
gdf = gdf.to_crs("EPSG:3435")
census_tracts_2000 = census_tracts_2000.to_crs(gdf.crs)

# Step 3: Calculate the Centroid of Each Census Tract
census_tracts_2000['centroid'] = census_tracts_2000.geometry.centroid

# Step 4: Find the Closest Station for Each Census Tract with Distance Check
def find_closest_station(tract, stations, max_distance=4000):
    # Calculate distances from the tract's centroid to all stations
    distances = stations.distance(tract['centroid'])
    
    # Find the index of the closest station
    closest_station_idx = distances.idxmin()
    
    # Get the minimum distance to the closest station
    closest_distance = distances.min()
    
    # If the closest station is within the specified max_distance, return the station ID
    if closest_distance <= max_distance:
        return stations.iloc[closest_station_idx]['MAP_ID'], closest_distance
    else:
        # Return NaN if the station is too far
        return np.nan, np.nan

# Apply the function to find the closest station for each tract and calculate the distance
census_tracts_2000['closest_station_id'], census_tracts_2000['distance_to_station'] = zip(
    *census_tracts_2000.apply(find_closest_station, stations=gdf, axis=1)
)

# Step 5: Filter out tracts with no valid closest station (distance > 1000 meters)
census_tracts_2000_filtered = census_tracts_2000.dropna(subset=['closest_station_id'])

# Step 6: Save the filtered result to CSV
census_tracts_2000_filtered.drop(columns=['geometry', 'centroid', 'distance_to_station']).to_csv(
    'C:/Users/willq/Documents/tracts_with_closest_station_filtered.csv', index=False
)
```

```{python}
#| eval: false
#2010
# Step 1: Reproject Both Datasets to a Projected CRS
# EPSG:3435 is suitable for Chicago area (Illinois State Plane East)
gdf = gdf.to_crs("EPSG:3435")
census_tracts_2010 = census_tracts_2010.to_crs(gdf.crs)

# Step 3: Calculate the Centroid of Each Census Tract
census_tracts_2010['centroid'] = census_tracts_2010.geometry.centroid

# Step 4: Find the Closest Station for Each Census Tract with Distance Check
def find_closest_station(tract, stations, max_distance=4000):
    # Calculate distances from the tract's centroid to all stations
    distances = stations.distance(tract['centroid'])
    
    # Find the index of the closest station
    closest_station_idx = distances.idxmin()
    
    # Get the minimum distance to the closest station
    closest_distance = distances.min()
    
    # If the closest station is within the specified max_distance, return the station ID
    if closest_distance <= max_distance:
        return stations.iloc[closest_station_idx]['MAP_ID'], closest_distance
    else:
        # Return NaN if the station is too far
        return np.nan, np.nan

# Apply the function to find the closest station for each tract and calculate the distance
census_tracts_2010['closest_station_id'], census_tracts_2010['distance_to_station'] = zip(
    *census_tracts_2010.apply(find_closest_station, stations=gdf, axis=1)
)

# Step 5: Filter out tracts with no valid closest station (distance > 1000 meters)
census_tracts_2010_filtered = census_tracts_2010.dropna(subset=['closest_station_id'])

# Step 6: Save the filtered result to CSV
census_tracts_2010_filtered.drop(columns=['geometry', 'centroid', 'distance_to_station']).to_csv(
    'C:/Users/willq/Documents/tracts_with_closest_station_filtered.csv', index=False
)
import matplotlib.pyplot as plt

# Plot the census tracts
ax = census_tracts_2010_filtered.plot(color="lightblue", edgecolor="gray", figsize=(100, 100))

# Plot the stations
gdf.plot(ax=ax, color="red", marker="o", label="Stations")

# Customize the map
plt.title("Census Tracts and Closest Stations")
plt.legend()
plt.xlabel("Easting (meters)")
plt.ylabel("Northing (meters)")

# Save the plot to a PDF file
plt.savefig('C:/Users/willq/Documents/census_tracts_with_stations_2010.pdf', format='pdf', bbox_inches='tight')

# Display the plot in the console
plt.show()
```

The final map looks like this:

![](Tract%20Map.jpg){width="325"}

#### Importing Tract ID

```{r}
#2010
tract1_2010 <- read.csv("https://raw.githubusercontent.com/Will-Quinn-1919/CTA-Ridership-Mixed-Effect-Model/refs/heads/master/2010/tracts_with_closest_station_filtered_2010.csv")
tract2_2010 <- tract1_2010[,c(5,9,13)]
tract3_2010 <- tract2_2010 %>%
  rename(tract = NAME10,
         land_area = ALAND10,
         station_id = closest_station_id)
tract3_2010[, 1:3] <- lapply(tract3_2010[, 1:3], function(x) gsub("[^0-9.]", "", x))
tract3_2010[, 1:3] <- lapply(tract3_2010[, 1:3], as.numeric)

#2000
tract1_2000 <- read.csv("https://raw.githubusercontent.com/Will-Quinn-1919/CTA-Ridership-Mixed-Effect-Model/refs/heads/master/2000/tracts_with_closest_station_filtered_2000.csv")
tract2_2000 <- tract1_2000[,c(5,9,13)]
tract3_2000 <- tract2_2000 %>%
  rename(tract = NAME00,
         land_area = ALAND00,
         station_id = closest_station_id)
tract3_2000[, 1:3] <- lapply(tract3_2000[, 1:3], function(x) gsub("[^0-9.]", "", x))
tract3_2000[, 1:3] <- lapply(tract3_2000[, 1:3], as.numeric)
```

### Importing Tract Data

#### [Population - 2010](https://data.census.gov/table?t=Populations%20and%20People&g=050XX00US17031$1400000&y=2010)

```{r}
pop_2010 <- read.csv("https://raw.githubusercontent.com/Will-Quinn-1919/CTA-Ridership-Mixed-Effect-Model/refs/heads/master/2010/TRACT_DATA_2010/2010population-Data.csv")
pop_name <- read.csv("https://raw.githubusercontent.com/Will-Quinn-1919/CTA-Ridership-Mixed-Effect-Model/refs/heads/master/2010/TRACT_DATA_2010/2010population-Column-Metadata.csv")

pop_name2 <- pop_name[, 2]
colnames(pop_2010) <- pop_name2
pop_2010 <- pop_2010[-1,-c(1,4)]
pop_2010 <- pop_2010 %>%
  rename(tract = `Geographic Area Name`,
         population = Total
         )

pop_2010$tract <- sub("Census Tract ", "", pop_2010$tract)
pop_2010$tract <- sub(", Cook County, Illinois", "", pop_2010$tract)
pop_2010$tract <- trimws(pop_2010$tract)

pop_2010[, 1:2] <- lapply(pop_2010[, 1:2], function(x) gsub("[^0-9.]", "", x))
pop_2010[, 1:2] <- lapply(pop_2010[, 1:2], as.numeric)
```

#### [Population - 2000](https://data.census.gov/table?t=Populations%20and%20People&g=050XX00US17031$1400000&y=2000)

```{r}
pop_2000 <- read.csv("https://raw.githubusercontent.com/Will-Quinn-1919/CTA-Ridership-Mixed-Effect-Model/refs/heads/master/2000/TRACT_DATA_2000/2000population-Data.csv")
pop_name_2000 <- read.csv("https://raw.githubusercontent.com/Will-Quinn-1919/CTA-Ridership-Mixed-Effect-Model/refs/heads/master/2000/TRACT_DATA_2000/2000population-Column-Metadata.csv")

pop_name_2000_2 <- pop_name_2000[, 2]
colnames(pop_2000) <- pop_name_2000_2
pop_2000 <- pop_2000[-1,-c(1,3,6:119)]
pop_2000 <- pop_2000 %>%
  filter(`Population Groups` == "Total population")
pop_2000 <- pop_2000[,-2]


pop_2000 <- pop_2000 %>%
  rename(tract = `Geographic Area Name`,
         population = `Number!!Total population`
         )

pop_2000$tract <- sub("Census Tract ", "", pop_2000$tract)
pop_2000$tract <- sub(", Cook County, Illinois", "", pop_2000$tract)
pop_2000$tract <- trimws(pop_2000$tract)

pop_2000[, 1:2] <- lapply(pop_2000[, 1:2], function(x) gsub("[^0-9.]", "", x))
pop_2000[, 1:2] <- lapply(pop_2000[, 1:2], as.numeric)
```

#### [Population - 2000 - missed](https://data.census.gov/table/DECENNIALDPSF22000.DP1?t=Populations%20and%20People&g=1400000US17031080600,17031150100,17031241700,17031243600,17031270600,17031270900,17031280300,17031280700,17031281100,17031281400,17031281500,17031282100,17031282600,17031284000,17031291800,17031292700,17031311100,17031311200,17031320300,17031330400,17031350500,17031381300,17031381600,17031440500,17031561300,17031581000,17031590100,17031600100,17031690200,17031760900&y=2000)

For some reason the US census website does not like to provide a zip file that contains these tracts with the rest of them. As a result we must also import them separately.

```{r}
pop_2000_missed <- read.csv("2000/TRACT_DATA_2000/2000population_missing-DATA.csv")
pop_name_2000_m <- read.csv("2000/TRACT_DATA_2000/2000population_missing-Column-Metadata.csv")

pop_name_2000_m2 <- pop_name_2000_m[, 2]
colnames(pop_2000_missed) <- pop_name_2000_m2

pop_2000_missed <- pop_2000_missed[-1,c(2,5)]

pop_2000_missed <- pop_2000_missed %>%
  rename(tract = `Geographic Area Name`,
         population = `Number!!Total population`
         )

pop_2000_missed$tract <- sub("Census Tract ", "", pop_2000_missed$tract)
pop_2000_missed$tract <- sub(", Cook County, Illinois", "", pop_2000_missed$tract)
pop_2000_missed$tract <- trimws(pop_2000_missed$tract)

pop_2000_missed[, 1:2] <- lapply(pop_2000_missed[, 1:2], function(x) gsub("[^0-9.]", "", x))
pop_2000_missed[, 1:2] <- lapply(pop_2000_missed[, 1:2], as.numeric)
```

#### [Poverty - 2010](https://data.census.gov/table?t=Income%20and%20Poverty&g=050XX00US17031$1400000&y=2010)

```{r}
pov_2010 <- read.csv("2010/TRACT_DATA_2010/2010poverty-Data.csv")
pov_name <- read.csv("2010/TRACT_DATA_2010/2010poverty-Column-Metadata.csv")

pov_name2 <- pov_name[, 2]
colnames(pov_2010) <- pov_name2
pov_2010 <- pov_2010[-1,]
pov_2010 <- pov_2010[,c(2,11,19,27,35,43,51,59,67,75,83)]
colnames(pov_2010)[2:11] <- gsub("^Households!!Estimate!!", "", colnames(pov_2010)[2:11])
colnames(pov_2010)[1] <- "tract"

pov_2010[, 1:11] <- lapply(pov_2010[, 1:11], function(x) gsub("[^0-9.]", "", x))
pov_2010[, 1:11] <- lapply(pov_2010[, 1:11], as.numeric)

pov_2010$low_income <- pov_2010$`Less than $10,000` +
  pov_2010$`$10,000 to $14,999` +
  pov_2010$`$15,000 to $24,999`

pov_2010$middle_income <- pov_2010$`$25,000 to $34,999` +
  pov_2010$`$35,000 to $49,999` +
  pov_2010$`$50,000 to $74,999`

pov_2010$high_income <- pov_2010$`$75,000 to $99,999` +
  pov_2010$`$100,000 to $149,999` +
  pov_2010$`$150,000 to $199,999` +
  pov_2010$`$200,000 or more`

pov_2010 <- pov_2010[, !(names(pov_2010) %in% c("Less than $10,000", "$10,000 to $14,999",
                                 "$15,000 to $24,999", "$25,000 to $34,999",
                                 "$35,000 to $49,999", "$50,000 to $74,999",
                                 "$75,000 to $99,999", "$100,000 to $149,999",
                                 "$150,000 to $199,999", "$200,000 or more"))]

pov_2010$tract <- sub("Census Tract ", "", pov_2010$tract)
pov_2010$tract <- sub(", Cook County, Illinois", "", pov_2010$tract)
pov_2010$tract <- trimws(pov_2010$tract)
```

#### [Poverty - 2000](https://data.census.gov/table?t=Income%20and%20Poverty&g=050XX00US17031$1400000&y=2000)

```{r}
pov_2000 <- read.csv("2000/TRACT_DATA_2000/2000poverty-Data.csv")
pov_name_2000 <- read.csv("2000/TRACT_DATA_2000/2000poverty-Column-Metadata.csv")

pov_name2_2000 <- pov_name_2000[, 2]
colnames(pov_2000) <- pov_name2_2000
pov_2000 <- pov_2000[-1,]
pov_2000 <- pov_2000[,c(2,4,100,102,104,106,108,110,112,114,116,118)]

pov_2000 <- pov_2000 %>%
  filter(`Population Groups` == "Total population")

pov_2000 <- pov_2000[,-2]

colnames(pov_2000)[2:11] <- gsub("^Percent!!INCOME IN 1999!!Households!!", "", colnames(pov_2000)[2:11])
colnames(pov_2000)[1] <- "tract"

pov_2000[, 1:11] <- lapply(pov_2000[, 1:11], function(x) gsub("[^0-9.]", "", x))
pov_2000[, 1:11] <- lapply(pov_2000[, 1:11], as.numeric)

pov_2000$low_income <- pov_2000$`Less than $10,000` +
  pov_2000$`$10,000 to $14,999` +
  pov_2000$`$15,000 to $24,999`

pov_2000$middle_income <- pov_2000$`$25,000 to $34,999` +
  pov_2000$`$35,000 to $49,999` +
  pov_2000$`$50,000 to $74,999`

pov_2000$high_income <- pov_2000$`$75,000 to $99,999` +
  pov_2000$`$100,000 to $149,999` +
  pov_2000$`$150,000 to $199,999` +
  pov_2000$`$200,000 or more`

pov_2000 <- pov_2000[, !(names(pov_2000) %in% c("Less than $10,000", "$10,000 to $14,999",
                                 "$15,000 to $24,999", "$25,000 to $34,999",
                                 "$35,000 to $49,999", "$50,000 to $74,999",
                                 "$75,000 to $99,999", "$100,000 to $149,999",
                                 "$150,000 to $199,999", "$200,000 or more"))]

pov_2000$tract <- sub("Census Tract ", "", pov_2000$tract)
pov_2000$tract <- sub(", Cook County, Illinois", "", pov_2000$tract)
pov_2000$tract <- trimws(pov_2000$tract)
```

#### [Poverty - 2000 - missed](https://data.census.gov/table?t=Income%20and%20Poverty&g=1400000US17031080600,17031150100,17031241700,17031243600,17031270600,17031270900,17031280300,17031280700,17031281100,17031281400,17031281500,17031282100,17031282600,17031284000,17031291800,17031292700,17031311100,17031311200,17031320300,17031330400,17031350500,17031381300,17031381600,17031440500,17031561300,17031581000,17031590100,17031600100,17031690200,17031760900&y=2000)

```{r}
pov_2000_missed <- read.csv("2000/TRACT_DATA_2000/2000poverty_missing-Data.csv")
pov_name_2000_m <- read.csv("2000/TRACT_DATA_2000/2000poverty_missing-Column-Metadata.csv")

pov_name2_2000_m <- pov_name_2000_m[, 2]
colnames(pov_2000_missed) <- pov_name2_2000_m
pov_2000_missed <- pov_2000_missed[-1,]

pov_2000_missed <- pov_2000_missed[,c(2,96,98,100,102,104,106,108,110,112,114,116)]

pov_2000_missed <- pov_2000_missed[,-2]

colnames(pov_2000_missed)[2:11] <- gsub("Percent!!INCOME IN 1999!!Households!!", "", colnames(pov_2000_missed)[2:11])
colnames(pov_2000_missed)[1] <- "tract"

pov_2000_missed[, 1:11] <- lapply(pov_2000_missed[, 1:11], function(x) gsub("[^0-9.]", "", x))
pov_2000_missed[, 1:11] <- lapply(pov_2000_missed[, 1:11], as.numeric)

pov_2000_missed$low_income <- pov_2000_missed$`Less than $10,000` +
  pov_2000_missed$`$10,000 to $14,999` +
  pov_2000_missed$`$15,000 to $24,999`

pov_2000_missed$middle_income <- pov_2000_missed$`$25,000 to $34,999` +
  pov_2000_missed$`$35,000 to $49,999` +
  pov_2000_missed$`$50,000 to $74,999`

pov_2000_missed$high_income <- pov_2000_missed$`$75,000 to $99,999` +
  pov_2000_missed$`$100,000 to $149,999` +
  pov_2000_missed$`$150,000 to $199,999` +
  pov_2000_missed$`$200,000 or more`

pov_2000_missed <- pov_2000_missed[, !(names(pov_2000_missed) %in% c("Less than $10,000", "$10,000 to $14,999",
                                 "$15,000 to $24,999", "$25,000 to $34,999",
                                 "$35,000 to $49,999", "$50,000 to $74,999",
                                 "$75,000 to $99,999", "$100,000 to $149,999",
                                 "$150,000 to $199,999", "$200,000 or more"))]

pov_2000_missed$tract <- sub("Census Tract ", "", pov_2000_missed$tract)
pov_2000_missed$tract <- sub(", Cook County, Illinois", "", pov_2000_missed$tract)
pov_2000_missed$tract <- trimws(pov_2000_missed$tract)
```

#### [Demographic - 2010](https://data.census.gov/table?t=Race%20and%20Ethnicity&g=050XX00US17031$1400000&y=2010)

```{r}
race_2010 <- read.csv("2010/TRACT_DATA_2010/2010race-Data.csv")
race_name <- read.csv("2010/TRACT_DATA_2010/2010race-Column-Metadata.csv")

race_name2 <- race_name[, 2]
colnames(race_2010) <- race_name2
race_2010 <- race_2010[-1,-c(1,5,6,13:76)]

colnames(race_2010)[3:9] <- gsub("^Total!!", "", colnames(race_2010)[3:9])
colnames(race_2010)[4:9] <- gsub("Not Hispanic or Latino!!Population of one race!!", "", colnames(race_2010)[4:9])
race_2010 <- clean_names(dat = race_2010)
colnames(race_2010)[1] <- "tract"
race_2010$tract <- sub("Census Tract ", "", race_2010$tract)
race_2010$tract <- sub(", Cook County, Illinois", "", race_2010$tract)

race_2010[, 1:9] <- lapply(race_2010[, 1:9], function(x) gsub("[^0-9.]", "", x))
race_2010[, 1:9] <- lapply(race_2010[, 1:9], as.numeric)

race_2010$Other_Race <- race_2010$native_hawaiian_and_other_pacific_islander_alone + race_2010$american_indian_and_alaska_native_alone + race_2010$some_other_race_alone
race_2010 <- race_2010[,-c(6, 8, 9)]

race_2010[, 3:7] <- lapply(race_2010[, 3:7], function(x) as.numeric(x) / as.numeric(race_2010$total) * 100)

race_2010 <- race_2010[,-2]
```

#### [Demographic - 2000](https://data.census.gov/table?t=Populations%20and%20People&g=050XX00US17031$1400000&y=2000)

```{r}
race_2000 <- read.csv("2000/TRACT_DATA_2000/2000race-DATA.csv")
race_name_2000 <- read.csv("2000/TRACT_DATA_2000/2000race-Column-Metadata.csv")

race_name_2000_2 <- race_name_2000[, 2]
colnames(race_2000) <- race_name_2000_2
race_2000 <- race_2000[-1,c(2,4:5)]

race_2000 <- race_2000 %>%
  rename(tract = `Geographic Area Name`
         )

race_2000$tract <- sub("Census Tract ", "", race_2000$tract)
race_2000$tract <- sub(", Cook County, Illinois", "", race_2000$tract)
race_2000$tract <- trimws(race_2000$tract)

race_2000 <- race_2000 %>%
  group_by(tract) %>%
  pivot_wider(names_from = `Population Groups`, values_from = `Number!!Total population`)

race_2000[, 1:7] <- lapply(race_2000[, 1:7], function(x) gsub("[^0-9.]", "", x))
race_2000[, 1:7] <- lapply(race_2000[, 1:7], as.numeric)

race_2000 <- race_2000 %>%
  mutate(across(everything(), ~ replace_na(.x, 0)))

race_2000[, 3:7] <- lapply(race_2000[, 3:7], function(x) as.numeric(x) / as.numeric(race_2000$`Total population`) * 100)

race_2000 <- race_2000 %>%
  rename(hispanic_or_latino = `Hispanic or Latino (of any race) (200-299)`,
         white_alone = `White alone`,
         black_or_african_american_alone = `Black or African American alone`,
         Other_Race = `Some other race alone`,
         asian_alone = `Asian alone (400-499)`
         )

race_2000 <- race_2000[,-2]
```

#### [Demographic - 2000 - missed](https://data.census.gov/table?t=400:451:453:457:461&g=1400000US17031080600,17031150100,17031241700,17031243600,17031270600,17031270900,17031280300,17031280700,17031281100,17031281400,17031281500,17031282100,17031282600,17031284000,17031291800,17031292700,17031311100,17031311200,17031320300,17031330400,17031350500,17031381300,17031381600,17031440500,17031561300,17031581000,17031590100,17031600100,17031690200,17031760900&y=2000)

```{r}
race_2000_missed <- read.csv("2000/TRACT_DATA_2000/2000race_missing-DATA.csv")
race_name_2000m <- read.csv("2000/TRACT_DATA_2000/2000race_missing-Column-Metadata.csv")

race_name_2000_2m <- race_name_2000m[, 2]
colnames(race_2000_missed) <- race_name_2000_2m

race_2000_missed <- race_2000_missed[-1,c(2:5)]

race_2000_missed <- race_2000_missed %>%
  rename(tract = `Geographic Area Name`
         )

race_2000_missed$tract <- sub("Census Tract ", "", race_2000_missed$tract)
race_2000_missed$tract <- sub(", Cook County, Illinois", "", race_2000_missed$tract)
race_2000_missed$tract <- trimws(race_2000_missed$tract)

race_2000_missed <- race_2000_missed %>%
  group_by(tract) %>%
  pivot_wider(names_from = `Population Groups`, values_from = `Number!!Total population`)

race_2000_missed <- race_2000_missed[,-2]

race_2000_missed[, 1:5] <- lapply(race_2000_missed[, 1:5], function(x) gsub("[^0-9.]", "", x))
race_2000_missed[, 1:5] <- lapply(race_2000_missed[, 1:5], as.numeric)

race_2000_missed <- merge(race_2000_missed, pop_2000_missed, by.x = "tract", by.y = "tract", all.x = TRUE)

race_2000_missed <- race_2000_missed %>%
  mutate(Other_Race = NA)

race_2000_missed[, 1:7] <- lapply(race_2000_missed[, 1:7], function(x) gsub("[^0-9.]", "", x))
race_2000_missed[, 1:7] <- lapply(race_2000_missed[, 1:7], as.numeric)

race_2000_missed[, c(2:5,7)] <- lapply(race_2000_missed[, c(2:5,7)], function(x) as.numeric(x) / as.numeric(race_2000_missed$population) * 100)

race_2000_missed <- race_2000_missed %>%
  rename(hispanic_or_latino = `Hispanic or Latino (of any race) (200-299)`,
         white_alone = `White alone, not Hispanic or Latino`,
         black_or_african_american_alone = `Black or African American alone, not Hispanic or Latino`,
         asian_alone = `Asian alone, not Hispanic or Latino`
         )

race_2000_missed <- race_2000_missed[,-6]

race_2000_missed <- race_2000_missed %>%
  group_by(tract) %>%
  summarize(
    hispanic_or_latino = sum(hispanic_or_latino),
    white_alone = sum(white_alone),
    black_or_african_american_alone = sum(black_or_african_american_alone),
    asian_alone = sum(asian_alone),
    Other_Race = sum(Other_Race)
  )
```

#### [Vehicles - 2010](https://data.census.gov/table/ACSDP5Y2010.DP04?t=Financial%20Characteristics&g=050XX00US17031$1400000&y=2010)

```{r}
house_2010 <- read.csv("2010/TRACT_DATA_2010/2010household-Data.csv")
house_name <- read.csv("2010/TRACT_DATA_2010/2010household-Column-Metadata.csv")

house_name2 <- house_name[, 2]
colnames(house_2010) <- house_name2
house_2010 <- house_2010[, !grepl("^Percent Margin of Error!!", colnames(house_2010))]
house_2010 <- house_2010[, !grepl("^Estimate Margin of Error!!", colnames(house_2010))]
house_2010 <- house_2010[-1,-c(4:114,123:285)]
house_2010 <- house_2010[,-c(1,3,4,6,8,10)]
colnames(house_2010)[2:5] <- gsub("Percent!!VEHICLES AVAILABLE!!", "", colnames(house_2010)[2:5])
colnames(house_2010)[1] <- "tract"
house_2010$tract <- sub("Census Tract; ", "", house_2010$tract)
house_2010$tract <- sub("; Cook County; Illinois", "", house_2010$tract)

house_2010[, 1:5] <- lapply(house_2010[, 1:5], function(x) gsub("[^0-9.]", "", x))
house_2010[, 1:5] <- lapply(house_2010[, 1:5], as.numeric)

house_2010$vehicle_available <- house_2010$`1 vehicle available` +
  house_2010$`2 vehicles available` +
  house_2010$`3 or more vehicles available`

house_2010 <- house_2010[, !(names(house_2010) %in% c("1 vehicle available", "2 vehicles available",
                                 "3 or more vehicles available"))]
```

#### [Vehicles - 2000](https://data.census.gov/table?t=Financial%20Characteristics&g=050XX00US17031$1400000&y=2000)

```{r}
house_2000 <- read.csv("2000/TRACT_DATA_2000/2000household-Data.csv")
house_name_2000 <- read.csv("2000/TRACT_DATA_2000/2000household-Column-Metadata.csv")

house_name2_2000 <- house_name_2000[, 2]
colnames(house_2000) <- house_name2_2000
house_2000 <- house_2000[-1,c(2,4,74,76,78,80)]

house_2000 <- house_2000 %>%
  filter(`Population Groups` == "Total population")

house_2000 <- house_2000[,-2]

colnames(house_2000)[1] <- "tract"

house_2000$tract <- sub("Census Tract ", "", house_2000$tract)
house_2000$tract <- sub(", Cook County, Illinois", "", house_2000$tract)

house_2000[, 1:5] <- lapply(house_2000[, 1:5], function(x) gsub("[^0-9.]", "", x))
house_2000[, 1:5] <- lapply(house_2000[, 1:5], as.numeric)

house_2000$vehicle_available <- house_2000$`Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!1` +
  house_2000$`Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!2` +
  house_2000$`Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!3 or more`

house_2000 <- house_2000[, !(names(house_2000) %in% c("Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!1", "Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!2", "Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!3 or more"))]

colnames(house_2000)[2] <- "No vehicles available"
```

#### Vehicles - 2000 - missed

```{r}
house_2000_missed <- read.csv("2000/TRACT_DATA_2000/2000household_missing-Data.csv")
house_name_2000m <- read.csv("2000/TRACT_DATA_2000/2000household_missing-Column-Metadata.csv")

house_name2_2000m <- house_name_2000m[, 2]
colnames(house_2000_missed) <- house_name2_2000m
house_2000_missed <- house_2000_missed[-1,c(2,74,76,78,80)]

colnames(house_2000_missed)[1] <- "tract"

house_2000_missed$tract <- sub("Census Tract ", "", house_2000_missed$tract)
house_2000_missed$tract <- sub(", Cook County, Illinois", "", house_2000_missed$tract)

house_2000_missed[, 1:5] <- lapply(house_2000_missed[, 1:5], function(x) gsub("[^0-9.]", "", x))
house_2000_missed[, 1:5] <- lapply(house_2000_missed[, 1:5], as.numeric)

house_2000_missed$vehicle_available <- house_2000_missed$`Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!1` +
  house_2000_missed$`Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!2` +
  house_2000_missed$`Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!3 or more`

house_2000_missed <- house_2000_missed[, !(names(house_2000_missed) %in% c("Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!1", "Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!2", "Percent!!Occupied Housing Units!!VEHICLES AVAILABLE!!3 or more"))]

colnames(house_2000_missed)[2] <- "No vehicles available"
```

### Merging Tract Data Together

```{r}
#2010
tract4_2010 <- merge(tract3_2010, pop_2010, by.x = "tract", by.y = "tract", all.x = TRUE)
tract5_2010 <- merge(tract4_2010, pov_2010, by.x = "tract", by.y = "tract", all.x = TRUE)
tract6_2010 <- merge(tract5_2010, race_2010, by.x = "tract", by.y = "tract", all.x = TRUE)
tract7_2010 <- merge(tract6_2010, house_2010, by.x = "tract", by.y = "tract", all.x = TRUE)

#2000
pop_2000_fixed <- rbind(pop_2000, pop_2000_missed)
pov_2000_fixed <- rbind(pov_2000, pov_2000_missed)
race_2000_fixed <- rbind(race_2000, race_2000_missed)
house_2000_fixed <- rbind(house_2000, house_2000_missed)

tract4_2000 <- merge(tract3_2000, pop_2000_fixed, by.x = "tract", by.y = "tract", all.x = TRUE)
tract5_2000 <- merge(tract4_2000, pov_2000_fixed, by.x = "tract", by.y = "tract", all.x = TRUE)
tract6_2000 <- merge(tract5_2000, race_2000_fixed, by.x = "tract", by.y = "tract", all.x = TRUE)
tract7_2000 <- merge(tract6_2000, house_2000_fixed, by.x = "tract", by.y = "tract", all.x = TRUE)
```

#### Cleaning Tract Data

```{r}
tract7_2010 <- tract7_2010 %>%
  group_by(station_id) %>%
  summarise(
    total_pop_density = sum(population) / sum(land_area) * 1000,
    
    avg_low_income = mean(low_income),
    avg_middle_income = mean(middle_income),
    avg_high_income = mean(high_income),
    
    avg_latino_alone = mean(hispanic_or_latino),
    avg_white_alone = mean(white_alone),
    avg_black_alone = mean(black_or_african_american_alone),
    avg_asian_alone = mean(asian_alone),
    avg_other = mean(Other_Race),
    
    avg_no_vehicles_available = mean(`No vehicles available`),
    avg_vehicle_available= mean(vehicle_available)
  )

tract7_2000[is.na(tract7_2000)] <- 0

tract7_2000 <- tract7_2000 %>%
  group_by(station_id) %>%
  summarise(
    total_pop_density = sum(population) / sum(land_area) * 1000,
    
    avg_low_income = mean(low_income),
    avg_middle_income = mean(middle_income),
    avg_high_income = mean(high_income),
    
    avg_latino_alone = mean(hispanic_or_latino),
    avg_white_alone = mean(white_alone),
    avg_black_alone = mean(black_or_african_american_alone),
    avg_asian_alone = mean(asian_alone),
    avg_other = mean(Other_Race),
    
    avg_no_vehicles_available = mean(`No vehicles available`),
    avg_vehicle_available= mean(vehicle_available)
  )
```

## Merging CTA Ridership Data and Census Tract Data

```{r}
train1 <- read.csv('CTA_RAW_DATA/CTA_RIDERSHIP_DATA.csv')

train1$date <- as.Date(train1$date, format="%m/%d/%Y")

train1$year <- format(train1$date, "%Y")
train1$month <- format(train1$date, "%m")

train1_2010 <- train1 %>%

  filter(year %in% 2010)

train1_2000 <- train1 %>%

  filter(year %in% 2001)

train2_2010 <- merge(tract7_2010, train1_2010, by.x = "station_id", by.y = "station_id", all.x = TRUE)

train2_2000 <- merge(tract7_2000, train1_2000, by.x = "station_id", by.y = "station_id", all.x = TRUE)

nrow(train2_2010)

nrow(train2_2000)

train3_tract <- rbind(train2_2010, train2_2000)

train3_tract <- train3_tract[,-c(1,14)]
```

### Assessing Missing Values (NA Values)

Note: Ohare, Midway, and 47th-dan ryan need new tracts

```{r}
rows_with_na <- train3_tract[!complete.cases(train3_tract), ]

unique(rows_with_na$stationname)

train3_tract <- na.omit(train3_tract)
```

# Adding "Line" Variable

```{r}
#| echo: false

# red

red_line_stations <- data.frame(
  station = c(
    "Howard", "Jarvis", "Morse", "Loyola",
    "Granville", "Thorndale", "Bryn Mawr", "Berwyn", 
    "Argyle", "Lawrence", "Wilson",  "Sheridan",
    "Addison-North Main", "Belmont-North Main", "Fullerton", "North/Clybourn",
    "Clark/Division", "Chicago/State", "Grand/State", "Lake/State",
    "Monroe/State", "Jackson/State", "Harrison", "Roosevelt",
    "Cermak-Chinatown", "Sox-35th-Dan Ryan", "47th-Dan Ryan", "Garfield-Dan Ryan",
    "63rd-Dan Ryan", "69th", "79th", "87th", 
    "95th/Dan Ryan"), line = "Red" )

# orange

orange_line_stations <- data.frame(
  station = c(
    "Midway Airport", "Pulaski-Orange", "Kedzie-Midway", "Western-Orange",
    "35th/Archer", "Ashland-Orange", "Halsted-Orange", "Roosevelt",
    "Library", "LaSalle/Van Buren", "Quincy/Wells", "Washington/Wells",
    "Clark/Lake", "State/Lake", "Adams/Wabash", "Washington/Wabash"),
  line = "Orange")

# Blue

blue_line_stations <- data.frame(
  station = c(
    "O'Hare Airport", "Rosemont", "Cumberland", "Harlem-O'Hare",
    "Jefferson Park", "Montrose-O'Hare", "Irving Park-O'Hare", "Addison-O'Hare",
    "Belmont-O'Hare", "Logan Square", "California/Milwaukee", "Western/Milwaukee",
    "Damen/Milwaukee", "Division/Milwaukee", "Chicago/Milwaukee", "Grand/Milwaukee",
    "Clark/Lake", "Washington/Dearborn", "Monroe/Dearborn", "Jackson/Dearborn",
    "LaSalle", "Clinton-Forest Park", "UIC-Halsted", "Racine",
    "Medical Center", "Western-Forest Park", "Kedzie-Homan-Forest Park",  "Pulaski-Forest Park", 
    "Cicero-Forest Park", "Austin-Forest Park", "Oak Park-Forest Park", "Harlem-Forest Park",
    "Forest Park"), line = "Blue")

# Brown

brown_line_stations <- data.frame(
  station = c(
    "Kimball", "Francisco", "Rockwell", "Western-Brown", "Damen-Brown",
    "Montrose-Brown", "Irving Park-Brown", "Addison-Brown", "Paulina",
    "Southport", "Belmont-North Main", "Wellington", "Diversey", "Fullerton",
    "Armitage", "Sedgwick", "Chicago/Franklin", "Merchandise Mart", 
    "Washington/Wells", "Quincy/Wells", "LaSalle/Van Buren", "Library", 
    "Adams/Wabash", "Washington/Wabash", "State/Lake", "Clark/Lake"),
  line = "Brown")

# Purple
purple_line_stations <- data.frame(
  station = c(
    "Howard", "South Boulevard", "Main", "Dempster", "Davis", 
    "Foster", "Noyes", "Central", "Linden", "Wilson", "Belmont-North Main",
    "Wellington", "Diversey", "Fullerton", "Armitage", "Sedgwick", 
    "Chicago/Franklin", "Merchandise Mart", "Washington/Wells", "Quincy/Wells", 
    "LaSalle/Van Buren", "Library", "Adams/Wabash", "Washington/Wabash", 
    "State/Lake", "Clark/Lake"),
  line = "Purple")

# Green
green_line_stations <- data.frame(
  station = c(
    "Ashland/63rd", "Cottage Grove", "King Drive", "Halsted", 
    "Garfield-South Elevated", "51st", "47th-South Elevated", "43rd",
    "Indiana", "35-Bronzeville-IIT", "Cermak-McCormick Place", "Roosevelt",
    "Adams/Wabash", "Washington/Wabash", "State/Lake", "Clark/Lake",
    "Clinton-Lake", "Morgan-Lake", "Ashland-Lake", "Damen-Lake",
    "California-Lake", "Kedzie-Lake", "Conservatory-Central Park Drive", "Pulaski-Lake",
    "Cicero-Lake", "Laramie", "Central-Lake", "Austin-Lake", 
    "Ridgeland", "Oak Park-Lake", "Harlem-Lake"), line = "Green")

# Pink

pink_line_stations <- data.frame(
  station = c(
    "Clark/Lake", "State/Lake", "Washington/Wabash", "Adams/Wabash", "Library",
    "LaSalle/Van Buren", "Quincy/Wells", "Washington/Wells", "Clinton-Lake",
    "Morgan-Lake", "Ashland-Lake", "Polk", "18th", 
    "Damen-Cermak", "Western-Cermak", "California-Cermak", "Kedzie-Cermak", 
    "Central Park", "Pulaski-Cermak", "Kostner", "Cicero-Cermak", 
    "54th/Cermak"), line = "Pink")

# Yellow

yellow_line_stations <- data.frame(
  station = c(
    "Howard", "Dempster-Skokie", "Oakton-Skokie"), line = "Yellow")

# Combine all line datasets

all_lines <- rbind(
  red_line_stations %>% mutate(line = "Red"),
  orange_line_stations %>% mutate(line = "Orange"),
  blue_line_stations %>% mutate(line = "Blue"),
  brown_line_stations %>% mutate(line = "Brown"),
  purple_line_stations %>% mutate(line = "Purple"),
  green_line_stations %>% mutate(line = "Green"),
  pink_line_stations %>% mutate(line = "Pink"),
  yellow_line_stations %>% mutate(line = "Yellow")
)

station_lines <- all_lines %>%
  mutate(value = 1) %>% 
  pivot_wider(
    names_from = line,  
    values_from = value,
    values_fill = 0     
  )

train4_tract <- merge(train3_tract, station_lines, by.x = "stationname", by.y = "station", all.x = TRUE)
```

# Visualizations

## Distribution of Rides

With an eye towards future modeling, lets take a look at the distribution of the variable "rides" first.

```{r}
#| echo: false

train_dist <- read.csv('CTA_RAW_DATA/CTA_RIDERSHIP_DATA.csv')

options(scipen = 999)
ggplot(train_dist, aes(x = rides)) +
  geom_histogram(binwidth = 1000, fill = "red", color = "black") +
  labs(title = "Histogram of CTA Ride Count",
       x = "Ride Count",
       y = "Frequency") +
  theme_minimal()
```

## Average Rides Along Day Type (weekday, Saturday, Sunday)

```{r}
#| echo: false

train_time <- read.csv('CTA_RAW_DATA/CTA_RIDERSHIP_DATA.csv')

train_time <- train_time %>%
  mutate(daytype = toupper(daytype))

train_time_d <- train_time %>%
  group_by(daytype) %>%
  summarise(
    total_rides = sum(rides),
    instances = n(),
    average_rides = total_rides / instances
  )

train_time_d <- train_time_d %>%
  mutate(daytype = case_when(
    daytype == "W" ~ "Weekday",
    daytype == "U" ~ "Sunday",
    daytype == "A" ~ "Saturday",
    TRUE ~ daytype
  ))

train_time_d$daytype <- factor(train_time_d$daytype, levels = c("Weekday", "Saturday", "Sunday"))

ggplot(train_time_d, aes(x = daytype, y = average_rides, fill = daytype)) + 
  geom_bar(stat = "identity", color = "black") + 
  labs(title = "Average of Total Rides by Day Type", x = "Day Type", y = "Average Rides") +
  theme_minimal()
```

## Average Rides Along Years (2000-2024)

```{r}
#| echo: false
train_time$date <- as.Date(train_time$date, format="%m/%d/%Y")

train_time$year <- format(train_time$date, "%Y")

train_time_y <- train_time %>%
  group_by(year) %>%
  summarise(
    total_rides = sum(rides),
    instances = n(),
    average = total_rides / instances
  )

plot(train_time_y$year, train_time_y$average, 
     main = "Scatter Plot of Average CTA Rides per Year", 
     xlab = "Year", 
     ylab = "Average Rides", 
     pch = 19, 
     col = "black", 
     type = "b", 
     lty = 1,   
     cex = 1,
     lwd = 2)
```

## Average Rides Along Months of the Year

```{r}
#| echo: false
train_time$month <- format(train_time$date, "%m")

train_time_m <- train_time %>%
  group_by(month) %>%
  summarise(
    total_rides = sum(rides),
    instances = n(),
    average = total_rides / instances
  )

plot(train_time_m$month, train_time_m$average, 
     main = "Scatter Plot of Average CTA Rides per Month", 
     xlab = "Month", 
     ylab = "Average Rides", 
     pch = 19, 
     col = "black", 
     type = "b", 
     lty = 1,   
     cex = 1,
     lwd = 2)
```

## Average Rides Between Lines Across Year

```{r}
#| echo: false
train_time2 <- read.csv('CTA_RAW_DATA/CTA_RIDERSHIP_DATA.csv')

train_line <- train_time2 %>%
  mutate(
    rides = case_when(
      stationname %in% c("Clark/Lake", "Lake/State") ~ rides / 6,
      stationname %in% c("Adams/Wabash", "Washington/Wabash") ~ rides / 5,
      stationname %in% c("Washington/Wells", "Quincy/Wells", "LaSalle/Van Buren", "Library") ~ rides / 4,
      stationname %in% c("Roosevelt", "Belmont-North Main", "Fullerton", "Howard") ~ rides / 3,
      stationname %in% c("Clinton-Lake", "Morgan-Lake", "Medical Center", "Armitage", "Wellington", "Diversey", "Sedgwick", "Chicago/Franklin", "Merchandise Mart") ~ rides / 2,
      TRUE ~ rides 
    )
  )

train_line <- merge(train_line, station_lines, by.x = "stationname", by.y = "station")

train_line2 <- train_line %>%
  pivot_longer(
    cols = c(Red, Orange, Blue, Brown, Purple, Green, Pink, Yellow), 
    names_to = "line",  
    values_to = "served",  
    values_drop_na = TRUE  
  ) %>%
  filter(served == 1)  

train_line2$date <- as.Date(train_line2$date, format="%m/%d/%Y")
train_line2$year <- format(train_line2$date, "%Y")

train_line_y <- train_line2 %>%
  group_by(year, line) %>%
  summarise(
    total_rides = sum(rides, na.rm = TRUE),
    instances = n(),
    average_rides = total_rides / instances,
    .groups = "drop"
  )

train_line_y$year <- as.numeric(train_line_y$year)

ggplot(train_line_y, aes(x = year, y = average_rides, color = line, group = line)) +
  geom_line() +
  geom_point() +
  labs(
    title = "Average CTA Rides per Year by Line",
    x = "Year",
    y = "Average Rides"
  ) +
  scale_color_manual(
    values = c(
      "Red" = "red", 
      "Orange" = "orange", 
      "Blue" = "blue", 
      "Brown" = "brown", 
      "Purple" = "purple", 
      "Green" = "green", 
      "Pink" = "pink", 
      "Yellow" = "yellow"
    )
  ) +
  scale_x_continuous(labels = function(x) sprintf("%02d", x %% 100)) +
  theme_minimal() +
  theme(
    legend.key.height = unit(0.5, "cm"),    
    legend.key.width = unit(0.15, "cm")         
  )

```

# Model Visualizations

## Year

```{r}
#| echo: false
train4_tract %>%
  ggplot(aes(x = total_pop_density, y = rides, col = year)) +
  geom_point() +
  facet_wrap(vars(year)) +
  labs(
    title = "CTA Rides Years 2001 vs 2010 Along Population Density",
    x = "Population Density",
    y = "Rides"
  ) 

train4_tract_year <- train4_tract %>%
  group_by(year, stationname, total_pop_density) %>%
  summarise(
    mean_rides = mean(rides, na.rm = TRUE),
    .groups = "drop"
  )

train4_tract_year %>%
  ggplot(aes(x = total_pop_density, y = mean_rides, col = year)) +
  geom_point() +
    geom_smooth(method = "lm", se = FALSE) +
  facet_wrap(vars(year)) +
  labs(
    title = "Average CTA Rides Years 2001 vs 2010 Along Population Density",
    x = "Population Density",
    y = "Average Rides"
  ) 
```

## Line

```{r}
train4_tract_line <- train4_tract %>%
  mutate(line = case_when(
    Purple == 1 ~ "Pruple",
    Brown == 1 ~ "Brown",
    TRUE ~ NA_character_ # どちらも1でない場合はNAにする
  )) %>%
  na.omit()

train4_tract_line <- train4_tract_line %>%
  group_by(line, stationname, total_pop_density) %>%
  summarise(
    mean_rides = mean(rides, na.rm = TRUE),
    .groups = "drop"
  )

ggplot(train4_tract_line, aes(x = total_pop_density, y = mean_rides, col = line)) +
  geom_point() +  # 散布図
  geom_smooth(method = "lm", se = FALSE) +  # 回帰直線を追加（信頼区間なし）
  facet_wrap(vars(line)) +  # ラインごとに分割
  labs(
    title = "Average CTA Rides: Red vs Blue Line Along Population Density",
    x = "Population Density",
    y = "Average Rides",
    color = "CTA Line"
  ) +
  theme_minimal() +
  scale_color_manual(
    values = c(
      "Pruple" = "purple", 
      "Brown" = "brown"
    ))
```

## Day type

```{r}
train4_tract_day <- train4_tract %>%
  group_by(daytype, stationname, total_pop_density) %>%
  summarise(
    mean_rides = mean(rides, na.rm = TRUE),
    .groups = "drop"
  )

train4_tract_day <- train4_tract_day %>%
  mutate(daytype = case_when(
    daytype == "W" ~ "Weekday",
    daytype == "U" ~ "Sunday",
    daytype == "A" ~ "Saturday",
    TRUE ~ daytype
  ))

train4_tract_day$daytype <- factor(train4_tract_day$daytype, levels = c("Weekday", "Saturday", "Sunday"))

ggplot(train4_tract_day, aes(x = total_pop_density, y = mean_rides, col = daytype)) +
  geom_point() +  # 散布図
  geom_smooth(method = "lm", se = FALSE) +  # 回帰直線を追加（信頼区間なし）
  facet_wrap(vars(daytype)) +  # ラインごとに分割
  labs(
    title = "Average CTA Rides: Day Type Along Population Density",
    x = "Population Density",
    y = "Average Rides",
    color = "CTA Line"
  ) +
  theme_minimal()
```

## Month

```{r}
train4_tract$month <- as.numeric(train4_tract$month)

train4_tract_month <- train4_tract %>%
  filter(month %in% c(1, 5, 9))

train4_tract_month <- train4_tract_month %>%
  group_by(month, stationname, total_pop_density) %>%
  summarise(
    mean_rides = mean(rides, na.rm = TRUE),
    .groups = "drop"
  )

ggplot(train4_tract_month, aes(x = total_pop_density, y = mean_rides, col = month)) +
  geom_point() +  # 散布図
  geom_smooth(method = "lm", se = FALSE) +  # 回帰直線を追加（信頼区間なし）
  facet_wrap(vars(month)) +  # ラインごとに分割
  labs(
    title = "Average CTA Rides: Month Along Population Density",
    x = "Population Density",
    y = "Average Rides") +
  theme_minimal()
```

# Mixed Effect Model

## Basic Linear Model

```{r}
linear_1 <- lmer(rides ~ 
total_pop_density
+ (1 | year), train4_tract)

linear_2 <- lmer(rides ~ 
total_pop_density
+ (1 | daytype) 
+ (1 | year), train4_tract)

linear_3 <- lmer(rides ~ 
total_pop_density
+ (1 | stationname) 
+ (1 | daytype) 
+ (1 | year), train4_tract)

train5_tract <- train4_tract %>%
  mutate(line = case_when(
    Red == 1 ~ "Red",
    Blue == 1 ~ "Blue",
    Orange == 1 ~ "Orange",
    Purple == 1 ~ "Pruple",
    Brown == 1 ~ "Brown",
    Green == 1 ~ "Green",
    Pink == 1 ~ "Pink",
    TRUE ~ NA_character_ # どちらも1でない場合はNAにする
  )) %>%
  na.omit()

linear_4 <- lmer(rides ~ 
  total_pop_density
  + (1 | daytype)
  + (1 | month)
  + (1 + total_pop_density | year),
  data = train5_tract
)

AIC(linear_1)
AIC(linear_2)
AIC(linear_3)
AIC(linear_4)

summary(linear_4)

r2_nakagawa(linear_4)

```

### Assumption Validity

```{r}
#| echo: false
plot(resid(linear_3) ~ fitted(linear_3), main = "Residuals vs Fitted", xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, col = "red", lty = 2)

qqnorm(resid(linear_3))
qqline(resid(linear_3), col = "red", lty = 2)

```
